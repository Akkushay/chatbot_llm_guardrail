# src/chatbot_llm_guardrail/data/synthetic_data_builder.py
import os
import json
import random
import requests
from chatbot_llm_guardrail.config import GROQ_API_ENDPOINT, GROQ_API_KEY
from dotenv import load_dotenv

load_dotenv()

class SyntheticDataBuilder:
    """
    Generates synthetic data samples for retail banking products using a Retrieval-Augmented Generation (RAG) approach.

    Each sample is a dictionary with keys:
      - "query": A user query regarding banking products.
      - "response": A synthetic answer generated by a strong LLM.
      - "retrieved_docs": A list of five document objects supporting the response.
      - "synthetic_groundedness": Binary indicator (0 or 1) for whether the sample is fully grounded.
    """

    def __init__(self, proportion_grounded: float, sample_count: int):
        """
        Args:
            proportion_grounded (float): Fraction of samples that should be fully grounded (1).
            sample_count (int): Number of samples to generate.
        """
        if not (0 <= proportion_grounded <= 1):
            raise ValueError("proportion_grounded must be between 0 and 1.")
        self.proportion_grounded = proportion_grounded
        self.sample_count = sample_count
        self.api_endpoint = GROQ_API_ENDPOINT
        self.api_key = GROQ_API_KEY
        if not self.api_endpoint or not self.api_key:
            raise EnvironmentError("GROQ_API_ENDPOINT and GROQ_API_KEY must be set as environment variables.")

    def _build_prompt(self, target_groundedness: int) -> str:
        """
        Builds a few-shot prompt instructing the strong LLM to generate a synthetic sample.
        """
        def rand_doc_id():
            return f"DOC{random.randint(1000, 9999)}"
        
        example_0 = (
            "Example (Ungrounded - Score 0):\n"
            "Query: 'What benefits does your savings account offer?'\n"
            "Response: 'Our savings account offers various benefits.'\n"
            "Retrieved Docs: [\n"
            f"  {{\"doc_id\": \"{rand_doc_id()}\", \"content\": \"No specific benefits mentioned.\"}},\n"
            f"  {{\"doc_id\": \"{rand_doc_id()}\", \"content\": \"Generic info provided.\"}}\n"
            "]\n"
            "Rationale: The response makes generic claims without document support. Groundedness = 0.\n\n"
        )
        example_1 = (
            "Example (Fully Grounded - Score 1):\n"
            "Query: 'What are the interest rates and fees for your Platinum Credit Card?'\n"
            "Response: 'Our Platinum Credit Card offers a 14% APR and an annual fee of $120, as confirmed in our official documents.'\n"
            "Retrieved Docs: [\n"
            f"  {{\"doc_id\": \"{rand_doc_id()}\", \"content\": \"Interest rate is 14% APR.\"}},\n"
            f"  {{\"doc_id\": \"{rand_doc_id()}\", \"content\": \"Annual fee is $120.\"}},\n"
            f"  {{\"doc_id\": \"{rand_doc_id()}\", \"content\": \"Official docs confirm these details.\"}}\n"
            "]\n"
            "Rationale: Every claim in the response is clearly supported by the retrieved docs. Groundedness = 1.\n\n"
        )
        prompt = (
            "You are a synthetic data generator for retail banking products. Generate a new sample consisting of:\n"
            "  1. A user query about banking products.\n"
            "  2. A synthetic response that is either fully supported by the documents (if target is 1) or not supported (if target is 0).\n"
            "  3. A list of exactly 5 retrieved document objects (each with keys 'doc_id' and 'content').\n\n"
            f"For this sample, the target groundedness is {target_groundedness}.\n\n"
            "Use the following examples as guidance:\n\n"
            + example_0 + example_1 +
            "Now, generate a new sample following these instructions. "
            "Return ONLY a valid JSON string with keys 'query', 'response', and 'retrieved_docs'."
        )
        return prompt

    def _extract_json(self, text: str) -> dict:
        """
        Extracts and parses a JSON object from the given text.
        """
        json_start = text.find("{")
        if json_start == -1:
            raise Exception("No JSON object found in the response text.")
        json_str = text[json_start:]
        try:
            return json.loads(json_str)
        except json.JSONDecodeError as e:
            raise Exception(f"JSON decoding failed: {e}")

    def _call_api(self, prompt: str) -> dict:
        """
        Calls the GROQ API with the provided prompt and returns the parsed JSON.
        """
        payload = {
            "model": "llama3-8b-8192",
            "messages": [
                {"role": "system", "content": "You are a creative and precise assistant. Respond ONLY with valid JSON and no extra text."},
                {"role": "user", "content": prompt}
            ]
        }
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        response = requests.post(self.api_endpoint, headers=headers, json=payload)
        if response.status_code == 200:
            full_response = response.json()
            try:
                content_str = full_response["choices"][0]["message"]["content"]
                return self._extract_json(content_str)
            except Exception as e:
                raise Exception(f"Failed to parse API response content: {e}")
        else:
            raise Exception(f"API call failed with status code {response.status_code}: {response.text}")

    def generate_samples(self) -> list:
        """
        Generates synthetic data samples.
        """
        samples = []
        for _ in range(self.sample_count):
            target_groundedness = 1 if random.random() < self.proportion_grounded else 0
            prompt = self._build_prompt(target_groundedness)
            try:
                sample_data = self._call_api(prompt)
            except Exception as e:
                # Fallback sample in case of API failure
                sample_data = {
                    "query": "What are the fees for your Gold Credit Card?",
                    "response": "Our Gold Credit Card offers a 10% APR and an annual fee of $80, as stated in our official docs.",
                    "retrieved_docs": [
                        {"doc_id": f"DOC{random.randint(1000, 9999)}", "content": "APR is 10%."},
                        {"doc_id": f"DOC{random.randint(1000, 9999)}", "content": "Annual fee is $80."},
                        {"doc_id": f"DOC{random.randint(1000, 9999)}", "content": "Fee schedule available."},
                        {"doc_id": f"DOC{random.randint(1000, 9999)}", "content": "Terms confirm the fee."},
                        {"doc_id": f"DOC{random.randint(1000, 9999)}", "content": "Regulatory info supports these figures."}
                    ]
                }
            docs = sample_data.get("retrieved_docs", [])
            if not isinstance(docs, list) or len(docs) < 5:
                docs = (docs + [{}] * 5)[:5]
            sample = {
                "query": sample_data.get("query", "No query generated."),
                "response": sample_data.get("response", "No response generated."),
                "retrieved_docs": docs,
                "synthetic_groundedness": target_groundedness
            }
            samples.append(sample)
        return samples
